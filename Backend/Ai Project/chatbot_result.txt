// import React, { useState } from "react";
// import { useTable, Column, TableOptions, useSortBy, usePagination, useFilters } from "react-table";
// import {
//   TableContainer,
//   Table,
//   TableHead,
//   TableRow,
//   TableCell,
//   TableBody,
//   TablePagination,
//   TextField,
//   InputAdornment,
//   Box,
//   MenuItem,
//   Select,
//   FormControl,
//   InputLabel,
//   IconButton,
//   Checkbox,
//   ListItemText,
//   Typography,
//   Dialog,
//   DialogActions,
//   DialogContent,
//   DialogTitle,
//   Button,
// } from "@mui/material";
// import { AiOutlineSortAscending, AiOutlineSortDescending, AiOutlineSearch, AiOutlineFilter } from "react-icons/ai";
// import { SelectChangeEvent } from "@mui/material";

// function TableHOC<T extends Record<string, any>>(
//   columns: Column<T>[],
//   data: T[],
//   containerClassName: string,
//   heading: string,
//   showPagination: boolean = false
// ) {
//   return function HOC() {
//     const options: TableOptions<T> = {
//       columns,
//       data,
//       initialState: {
//         pageSize: 5,
//       },
//     };

//     const {
//       getTableProps,
//       getTableBodyProps,
//       headerGroups,
//       rows,
//       prepareRow,
//       page,
//       gotoPage,
//       setPageSize,
//       setFilter,
//       state: { pageIndex, pageSize },
//     } = useTable(options, useFilters, useSortBy, usePagination);

//     const [selectedFilterField, setSelectedFilterField] = useState<string>("");
//     const [filterValue, setFilterValue] = useState<string>("");
//     const [visibleColumns, setVisibleColumns] = useState<string[]>(columns.map((column) => column.accessor as string));
//     const [openModal, setOpenModal] = useState(false);
//     const [modalContent, setModalContent] = useState<any>(null);

//     const fieldNames = columns.map((column) => column.accessor || column.Header);

//     const handleRowClick = (row: T) => {
//       setModalContent(row);
//       setOpenModal(true);
//     };

//     const handleCloseModal = () => {
//       setOpenModal(false);
//       setModalContent(null);
//     };

//     return (
//       <Box className={containerClassName} sx={{ p: 3, borderRadius: 2, boxShadow: 3, backgroundColor: "#f5f5f5" }}>
//         <Typography
//           variant="h4"
//           sx={{ textAlign: "center", marginBottom: 3, color: "#2e3b4e", fontWeight: "bold" }}
//         >
//           {heading}
//         </Typography>

//         {/* Filter Section */}
//         <Box display="flex" justifyContent="space-between" marginBottom={2} alignItems="center">
//           <FormControl variant="outlined" size="small" sx={{ minWidth: 220 }}>
//             <InputLabel>Filter By</InputLabel>
//             <Select value={selectedFilterField} onChange={(e) => setSelectedFilterField(e.target.value)} label="Filter By">
//               {fieldNames.map((field, index) => (
//                 <MenuItem key={index} value={String(field)}>
//                   {String(field)}
//                 </MenuItem>
//               ))}
//             </Select>
//           </FormControl>
//           {selectedFilterField && (
//             <TextField
//               label={`Filter by ${selectedFilterField}`}
//               variant="outlined"
//               size="small"
//               value={filterValue}
//               onChange={(e) => setFilter(selectedFilterField, e.target.value)}
//               InputProps={{
//                 startAdornment: (
//                   <InputAdornment position="start">
//                     <AiOutlineSearch />
//                   </InputAdornment>
//                 ),
//               }}
//               sx={{ width: 250, transition: "width 0.3s ease" }}
//             />
//           )}
//         </Box>

//         {/* Table */}
//         <TableContainer sx={{ borderRadius: 2, boxShadow: 3, backgroundColor: "#fff" }}>
//           <Table {...getTableProps()} sx={{ minWidth: 650 }}>
//             <TableHead sx={{ backgroundColor: "#3f51b5" }}>
//               {headerGroups.map((headerGroup) => (
//                 <TableRow {...headerGroup.getHeaderGroupProps()}>
//                   {headerGroup.headers.map((column) => (
//                     <TableCell
//                       {...column.getHeaderProps(column.getSortByToggleProps())}
//                       sx={{
//                         fontWeight: "bold",
//                         color: "#fff",
//                         "&:hover": { backgroundColor: "#303f9f" },
//                       }}
//                     >
//                       {column.render("Header")}
//                       {column.isSorted && (
//                         <span>{column.isSortedDesc ? <AiOutlineSortDescending /> : <AiOutlineSortAscending />}</span>
//                       )}
//                     </TableCell>
//                   ))}
//                 </TableRow>
//               ))}
//             </TableHead>
//             <TableBody {...getTableBodyProps()}>
//               {(showPagination ? page : rows).map((row, i) => {
//                 prepareRow(row);
//                 return (
//                   <TableRow
//                     {...row.getRowProps()}
//                     onClick={() => handleRowClick(row.original)}
//                     sx={{
//                       backgroundColor: i % 2 === 0 ? "#f9f9f9" : "#fff",
//                       "&:hover": { backgroundColor: "#e0e0e0" },
//                       cursor: "pointer",
//                     }}
//                   >
//                     {row.cells.map((cell) => (
//                       <TableCell {...cell.getCellProps()}>{cell.render("Cell")}</TableCell>
//                     ))}
//                   </TableRow>
//                 );
//               })}
//             </TableBody>
//           </Table>
//         </TableContainer>

//         {showPagination && (
//           <TablePagination
//             component="div"
//             count={rows.length}
//             page={pageIndex}
//             onPageChange={(event, newPage) => gotoPage(newPage)}
//             rowsPerPage={pageSize}
//             onRowsPerPageChange={(event) => setPageSize(parseInt(event.target.value, 10))}
//             rowsPerPageOptions={[5, 10, 15]}
//             sx={{ borderTop: "1px solid #ddd", paddingTop: 2 }}
//           />
//         )}

//         {/* Modal */}
//         <Dialog open={openModal} onClose={handleCloseModal}>
//           <DialogTitle>Row Details</DialogTitle>
//           <DialogContent>
//             {modalContent && Object.entries(modalContent).map(([key, value]) => (
//               <Typography key={key} variant="body2">
//                 <strong>{key}:</strong> {String(value)}
//               </Typography>
//             ))}
//           </DialogContent>
//           <DialogActions>
//             <Button onClick={handleCloseModal} color="primary">
//               Close
//             </Button>
//           </DialogActions>
//         </Dialog>
//       </Box>
//     );
//   };
// }

// export default TableHOC;









import React, { useState } from "react";
import {
  useTable,
  Column,
  TableOptions,
  useSortBy,
  usePagination,
  useFilters,
} from "react-table";
import {
  TableContainer,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  TablePagination,
  TextField,
  InputAdornment,
  Box,
  MenuItem,
  Select,
  FormControl,
  InputLabel,
  IconButton,
  Checkbox,
  ListItemText,
  Typography,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Button,
} from "@mui/material";
import {
  AiOutlineSortAscending,
  AiOutlineSortDescending,
  AiOutlineSearch,
  AiOutlineFilter,
} from "react-icons/ai";
import { SelectChangeEvent } from "@mui/material";

// Utility function to truncate text
const truncateText = (text: string, length: number): string =>
  text.length > length ? `${text.slice(0, length)}...` : text;

function TableHOC<T extends Record<string, any>>(
  columns: Column<T>[],
  data: T[],
  containerClassName: string,
  heading: string,
  showPagination: boolean = false
) {
  return function HOC() {
    const options: TableOptions<T> = {
      columns,
      data,
      initialState: {
        pageSize: 5,
      },
    };

    const {
      getTableProps,
      getTableBodyProps,
      headerGroups,
      rows,
      prepareRow,
      page,
      gotoPage,
      setPageSize,
      setFilter,
      state: { pageIndex, pageSize },
    } = useTable(options, useFilters, useSortBy, usePagination);

    const [selectedFilterField, setSelectedFilterField] = useState<string>("");
    const [filterValue, setFilterValue] = useState<string>("");
    const [visibleColumns, setVisibleColumns] = useState<string[]>(
      columns.map((column) => column.accessor as string)
    );

    // Modal State
    const [openModal, setOpenModal] = useState(false);
    const [modalContent, setModalContent] = useState<any>(null);

    const fieldNames = columns.map(
      (column) => column.accessor || column.Header
    );

    const handleFilterFieldChange = (event: SelectChangeEvent<string>) => {
      setSelectedFilterField(event.target.value);
    };

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
      const value = e.target.value;
      setFilterValue(value);
      setFilter(selectedFilterField, value);
    };

    const handleColumnVisibilityChange = (event: SelectChangeEvent<string[]>) => {
      const value = event.target.value;
      setVisibleColumns(Array.isArray(value) ? value : [value]);
    };

    const handleRowClick = (row: T) => {
      setModalContent(row);
      setOpenModal(true);
    };

    const handleCloseModal = () => {
      setOpenModal(false);
      setModalContent(null);
    };

    return (
      <Box
        className={containerClassName}
        sx={{ p: 3, borderRadius: 2, boxShadow: 3, backgroundColor: "#f5f5f5" }}
      >
        <Typography
          variant="h4"
          sx={{
            textAlign: "center",
            marginBottom: 3,
            color: "#2e3b4e",
            fontWeight: "bold",
          }}
        >
          {heading}
        </Typography>

        {/* Filter Section */}
        <Box display="flex" justifyContent="space-between" marginBottom={2} alignItems="center">
          <Box display="flex" alignItems="center" gap={2}>
            <FormControl variant="outlined" size="small" sx={{ minWidth: 220 }}>
              <InputLabel>Filter By</InputLabel>
              <Select value={selectedFilterField} onChange={handleFilterFieldChange} label="Filter By">
                {fieldNames.map((field, index) => (
                  <MenuItem key={index} value={String(field)}>
                    {String(field)}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
            {selectedFilterField && (
              <TextField
                label={`Filter by ${selectedFilterField}`}
                variant="outlined"
                size="small"
                value={filterValue}
                onChange={handleSearchChange}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <AiOutlineSearch />
                    </InputAdornment>
                  ),
                }}
                sx={{ width: 250, transition: "width 0.3s ease" }}
              />
            )}
          </Box>
        </Box>

        {/* Table */}
        <TableContainer sx={{ borderRadius: 2, boxShadow: 3, backgroundColor: "#fff" }}>
          <Table {...getTableProps()} sx={{ minWidth: 650 }}>
            <TableHead>
              {headerGroups.map((headerGroup) => (
                <TableRow {...headerGroup.getHeaderGroupProps()}>
                  {headerGroup.headers.map((column) => {
                    if (!visibleColumns.includes(column.id)) return null;
                    return (
                      <TableCell
                        {...column.getHeaderProps(column.getSortByToggleProps())}
                        sx={{ fontWeight: "bold" }}
                      >
                        {column.render("Header")}
                        {column.isSorted && (
                          <span>
                            {column.isSortedDesc ? (
                              <AiOutlineSortDescending />
                            ) : (
                              <AiOutlineSortAscending />
                            )}
                          </span>
                        )}
                      </TableCell>
                    );
                  })}
                </TableRow>
              ))}
            </TableHead>

            <TableBody {...getTableBodyProps()}>
              {(showPagination ? page : rows).map((row) => {
                prepareRow(row);
                return (
                  <TableRow {...row.getRowProps()} onClick={() => handleRowClick(row.original)}>
                    {row.cells.map((cell) => {
                      if (!visibleColumns.includes(cell.column.id)) return null;
                      const cellValue =
                        typeof cell.value === "string"
                          ? truncateText(cell.value, 20)
                          : cell.render("Cell");
                      return <TableCell {...cell.getCellProps()}>{cellValue}</TableCell>;
                    })}
                  </TableRow>
                );
              })}
            </TableBody>
          </Table>
        </TableContainer>

        {showPagination && (
          <TablePagination
            component="div"
            count={rows.length}
            page={pageIndex}
            onPageChange={(event, newPage) => gotoPage(newPage)}
            rowsPerPage={pageSize}
            onRowsPerPageChange={(event) => setPageSize(parseInt(event.target.value, 10))}
            rowsPerPageOptions={[5, 10, 15]}
          />
        )}

        <Dialog
          open={openModal}
          onClose={handleCloseModal}
          sx={{
            "& .MuiDialog-paper": {
              borderRadius: 8,
              padding: 3,
              maxWidth: 600,
              width: "100%",
              boxShadow: "0px 8px 24px rgba(0, 0, 0, 0.2)",
            },
          }}
        >
          <DialogTitle
            sx={{
              textAlign: "center",
              fontSize: "1.5rem",
              fontWeight: "bold",
              color: "#3f51b5",
              borderBottom: "1px solid #ddd",
              paddingBottom: 2,
              paddingTop: 2,
              
            }}
          >
            Row Details
          </DialogTitle>
          <DialogContent
            sx={{
              paddingTop: 2,
              display: "flex",
              flexDirection: "column",
              gap: 2,
            }}
          >
            {modalContent && (
              <Box>
                {Object.keys(modalContent).map((key) => (
                  <Typography
                    key={key}
                    variant="body1"
                    sx={{
                      fontSize: "1rem",
                      marginBottom: "0.5rem",
                      color: "#333",
                    }}
                  >
                    <strong style={{ color: "#3f51b5" }}>{key}:</strong> {modalContent[key]}
                  </Typography>
                ))}
              </Box>
            )}
          </DialogContent>
          <DialogActions
            sx={{
              justifyContent: "center",
              paddingTop: 2,
              borderTop: "1px solid #ddd",
            }}
          >
            <Button
              onClick={handleCloseModal}
              variant="contained"
              color="primary"
              sx={{
                textTransform: "none",
                fontWeight: "bold",
                boxShadow: "none",
                padding: "0.5rem 1.5rem",
              }}
            >
              Close
            </Button>
          </DialogActions>
        </Dialog>

      </Box>
    );
  };
}

export default TableHOC;